try:
    from loguru import logger
    logger.add("logs.log", enqueue=False, backtrace=False, catch=False)
    logger.info("imported loguru")
    logger.info("importing modules...")
    from aiogram import Bot, Dispatcher, executor, types
    logger.info("aiogram imported Bot, Dispatcher, executor, types")
    # –∏–º–ø–æ—Ä—Ç —Å—Ç–µ–π—Ç–æ–≤
    from aiogram.contrib.fsm_storage.memory import MemoryStorage
    logger.info("aiogram.contrib.fsm_storage.memory imported MemoryStorage")
    from aiogram.dispatcher import FSMContext
    logger.info("aiogram.dispatcher imported FSMContext")
    from aiogram.dispatcher.filters.state import State, StatesGroup
    logger.info("aiogram.dispatcher.filters.state imported State, StatesGroup")
    from aiogram.utils.exceptions import MessageNotModified
    logger.info("aiogram.utils.exceptions imported MessageNotModified")
    import os
    logger.info("imported os")
    import sys
    logger.info("imported sys")
    import requests
    logger.info("imported requests")
    import asyncio
    logger.info("imported asyncio")
    import sqlite3
    logger.info("imported sqlite3")
    import json
    logger.info("imported json")
    import colorama
    logger.info("imported colorama")
except ImportError:
    logger.error("ImportError: trying install...")
    os.system("pip install -r requirements.txt")
finally:
    logger.success("all modules imported successfully!\n")



class ApiToken:
    # ID –±–æ—Ç–∞ –∏–∑ t.me/BotFather
    TOKEN = 'token'



class Texts():
    # —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
    menu_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –±–æ—Ç–∞ üëã"
    instruction_text = """
    –ü–æ–ª–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≥–¥–µ —Å–∫–∞—á–∞—Ç—å, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è SCAM mode

    <b>–£–°–¢–ê–ù–û–í–ö–ê:</b>
      1. –°–∫–∞—á–∏–≤–∞–µ–º SCAM mode (–Ω–∏–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω —Ñ–∞–π–ª —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π SCAM mode).
      2. –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –≥–¥–µ –≤–∞–º —É–¥–æ–±–Ω–æ.
      3. –ù–∞—Ö–æ–¥–∏–º –ø–∞–ø–∫—É —Å –∏–≥—Ä–æ–π –∏ –∫–∏–¥–∞–µ–º —Ñ–∞–π–ª Assembly-CSharp.dll –ø–æ –∞–¥—Ä–µ—Å—É <code>CWClient\CWclient_Data\Managed</code> —Å –∑–∞–º–µ–Ω–æ–π (–ø–µ—Ä–µ–¥ —ç—Ç–∏–º –Ω–∞–¥–æ –∑–∞–∫—Ä—ã—Ç—å –∏–≥—Ä—É).

    <b>–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:</b>
      –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞—à–ª–∏ –≤ –∏–≥—Ä—É –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å (–∫–ª–∞–≤–∏—à–∞ ~) –∏ –≤–≤–æ–¥–∏–º scam (–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç SCAM mode).
      –≤—Å–µ –∫–∞–º—É—Ñ–ª—è–∂–∏ –Ω–∞ –ª—é–±–æ–µ –æ—Ä—É–∂–∏–µ –∏ –æ–±–≤–µ—Å—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã —Å—Ä–∞–∑—É, –º–æ–∂–Ω–æ –¥–∞–∂–µ –Ω–µ –ø–∏—Å–∞—Ç—å scam.
    –¢–µ–ø–µ—Ä—å –ø—Ä–æ–π–¥–µ–º—Å—è –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:
      <code>scam</code> - –≤–∫–ª—é—á–µ–Ω–∏–µ SCAM Mode
      <code>scam_off</code> - –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ SCAM Mode
      <code>scam_hc</code> - –ø–µ—Ä–µ–Ω–æ—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∞—Ä–∫–∞–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –≤ —Ö–∞—Ä–¥–∫–æ—Ä + —É–º–µ–Ω–∏—è, —Ç–µ–ø–ª–∞–∫ –∏ –ø—Ä–æ—á–µ–µ..
      <code>proscam</code> - –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã scam_hc, devmode, freegun, full_thermal
      <code>freegun</code> - —Å–≤–æ–±–æ–¥–Ω—ã–π –≤—ã–±–æ—Ä –æ—Ä—É–∂–∏—è –≤–æ –≤—Ä–µ–º—è –±–æ—è
      <code>devmode</code> - –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∞–∏–º (–∑–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É N) –∏ –≤—Ö
      <code>addnickchanges 10</code> - –¥–æ–±–∞–≤–ª—è–µ—Ç 10 (–º–æ–∂–Ω–æ –ª—é–±–æ–µ —á–∏—Å–ª–æ –≤–ø–∏—Å–∞—Ç—å) —Å–º–µ–Ω –Ω–∏–∫–∞
      <code>wtask ID</code> - –ø–æ–∫—É–ø–∫–∞ wtask–æ–≤ (–Ω–∞–¥–æ —É–∫–∞–∑–∞—Ç—å ID –æ—Ä—É–∂–∏—è –∏ —Ç–∞–∫–∂–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å GP)
      <code>GP 1000</code> - –Ω–∞–∫—Ä—É—Ç–∫–∞ GP (–≤–∏–∑—É–∞–ª)
      <code>SP 100</code> - –Ω–∞–∫—Ä—É—Ç–∫–∞ SP (–≤–∏–∑—É–∞–ª)
      <code>CR 100000</code> - –Ω–∞–∫—Ä—É—Ç–∫–∞ CR (–≤–∏–∑—É–∞–ª)
      <code>level 71</code> - –¥–µ–ª–∞–µ—Ç –≤–∞—Å 71 lvl (–≤–∏–∑—É–∞–ª)
      <code>repa 500</code> - –ø–æ—Å—Ç–∞–≤–∏—Ç—å 500 —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ (–≤–∏–∑—É–∞–ª)
      <code>exp 500</code> - –ø–æ—Å—Ç–∞–≤–∏—Ç—å 500 –æ–ø—ã—Ç–∞ (–≤–∏–∑—É–∞–ª)
      <code>wipewtask</code> - —Å–Ω—è—Ç—å –≤—Å–µ wtask (–≤–∏–∑—É–∞–ª)
      <code>masterofarms</code> - –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å–µ wtask (–≤–∏–∑—É–∞–ª)
      <code>knifedelay</code> - –±—ã—Å—Ç—Ä—ã–π –Ω–æ–∂
      <code>buyanov</code> - –≥–ª–∞–∑ –±—É—è–Ω–æ–≤–∞ - 100% —Ç–æ—á–Ω–æ—Å—Ç—å (–≤–∏–∑—É–∞–ª)
      <code>hidden_server_access</code> - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ –ø—Ä–æ—á–µ–µ..
      <code>addsnow</code> - –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–Ω–µ–≥ –Ω–∞ –∫–∞—Ä—Ç—É
      <code>full_thermal</code> - —Ç–µ–ø–ª–æ–≤–∏–∑–æ—Ä –Ω–∞ –≤—Å—é –∫–∞—Ä—Ç—É (–∏–ª–∏ –∫–ª–∞–≤–∏—à–∞ b –≤ proscam/devmode)
      <code>show_enemy_nick</code> - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∏–∫–æ–≤ –ø—Ä–∏ –∑–∞—Å–≤–µ—Ç–µ –∏–ª–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–∏ –≤ –∏–≥—Ä–æ–∫–æ–≤
      <code>connect_over_limit</code> - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ö–æ–¥–∏—Ç—å –Ω–∞ –∫–∞—Ä—Ç—ã –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏
      <code>clear</code> - –æ—á–∏—â–∞–µ—Ç –∫–æ–Ω—Å–æ–ª—å
      <code>showcross</code> - –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–Ω—ã–π crosshair
      <code>s_debug</code> - —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
      <code>targetframerate 144</code> - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ FPS –¥–æ –Ω—É–∂–Ω–æ–≥–æ –≤–∞–º —á–∏—Å–ª–∞
      <code>list</code> - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      <code>online</code> - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∏–≥—Ä–µ
      <code>socialID</code> - –≤–∞—à ID –≤ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
      <code>userID</code> - –≤–∞—à ID –≤ –∏–≥—Ä–µ
      <code>weapinfo</code> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä—É–∂–∏–∏ (—Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
      <code>promo (XXXXX-XXXXX-XXXXX-XXXXX-XXXXX)</code> - –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
      <code>clearprofile</code> - —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (–ù–ï –≤–∏–∑—É–∞–ª)
      <code>Fixed delta time -1</code> - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
      <code>http_debug</code> - –æ—Ç–∫–ª–∞–¥–∫–∞ http-–∑–∞–ø—Ä–æ—Å–æ–≤

    –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ø–∏—Å–∞–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤–æ –≤–∫–ª–∞–¥–∫–µ <b>SCAM info</b>
    """
    needsubscribe_text = "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã"
    betausererror_text = "‚ùå–í –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –±–µ—Ç–∞-—Ç–µ—Å—Ç—ã, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ"
    error_text = "‚õî–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ!"
    donate_text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è:"
    getscam_text = "–ü–æ–ª—É—á–∏—Ç—å SCAM mode –º–æ–∂–Ω–æ –≤ –¥–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ ‚Üì"
    requestad_text = """<b>–ú—ã —Ä–∞–¥—ã —á—Ç–æ —Ç—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –ö–í—à–µ—Ä–æ–≤!\n</b>
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—Å–µ —Ç–µ–±–µ –≤—Å–µ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:
    <a href="">Avoca<a/> - –Ω–∞—à —á–∞—Ç
    <a href="">CW SCAM<a/> - –∫–∞–Ω–∞–ª SCAM mode
    <a href="">CW MARKET<a/> - –±–∏—Ä–∂–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Contract Wars

    –ê —Ç–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ:
    <a href="https://www.donationalerts.com/r/avoca">–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É<a/>
    <a href="https://www.qiwi.com/n/VLAD2030">–ù–∞ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞<a/>
    """


    privat_price = 500
    private_text = "–ß—Ç–æ-–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É –∏ –∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∞ —Ç–∞–∫–∂–µ —Ä–∞–Ω–Ω–∏–µ –±–∏–ª–¥—ã —Ä–∞–Ω—å—à–µ –≤—Å–µ—Ö, –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø –∑–∞ <b>{privat_price}‚ÇΩ</b> –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –∏ –æ—Ç–ø–∏—Å–∞—Ç—å @avoca_cw"


    # —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
    instruction_buttontext = "üìù–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
    yourad_buttontext = "üé´–ó–¥–µ—Å—å –º–æ–≥–ª–∞ –±—ã –±—ã—Ç—å –≤–∞—à–∞ —Ä–µ–∫–ª–∞–º–∞"
    getSCAM_buttontext = "üìÑ–ü–æ–ª—É—á–∏—Ç—å SCAM"
    getonline_buttontext = "üåê–¢–µ–∫—É—â–∏–π –æ–Ω–ª–∞–π–Ω"
    private_buttontext = "üîí–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"
    betauser_buttontext = "üÜï–°—Ç–∞—Ç—å –±–µ—Ç–∞-—Ç–µ—Å—Ç–µ—Ä–æ–º"
    cwmarket_buttontext = "üìà–ë–∏—Ä–∂–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
    donate_buttontext = "üí∏–ü–æ–º–æ—á—å –ø—Ä–æ–µ–∫—Ç—É"
    avoca_buttontext = "–ó–∞–¥–æ–Ω–∞—Ç–∏—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—é –º–æ–¥–∞"
    server_buttontext = "–ó–∞–¥–æ–Ω–∞—Ç–∏—Ç—å –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞"
    russian_buttontext = "üá∑üá∫"
    english_buttontext = "üá∫üá∏"
    CWSCAM_buttontext = "CW SCAM"
    buy_buttontext = '–ö—É–ø–∏—Ç—å'
    back_buttontext = "‚Ü©–ù–∞–∑–∞–¥"



class Keyboards:
    def MenuKeyboard():
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton(
                text=Texts().instruction_buttontext,
                callback_data="get_instruction"
            ),
            types.InlineKeyboardButton(
                text=Texts().getSCAM_buttontext,
                callback_data="get_scam"
            ),
            types.InlineKeyboardButton(
                text=Texts().getonline_buttontext,
                callback_data="get_online"
            ),
            types.InlineKeyboardButton(
                text=Texts().private_buttontext,
                callback_data="get_private"
            ),
            types.InlineKeyboardButton(
                text=Texts().betauser_buttontext,
                callback_data="get_beta"
            ),
            types.InlineKeyboardButton(
                text=Texts().cwmarket_buttontext,
                url="https://t.me/CWMarketShop"
            ),
            types.InlineKeyboardButton(
                text=Texts().donate_buttontext,
                callback_data="donate"
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                text=Texts().russian_buttontext,
                callback_data="rus"
            ),
            types.InlineKeyboardButton(
                text=Texts().english_buttontext,
                callback_data="eng"
            )
        )
        logger.info('')
        return keyboard


    def ReturnKeyboard():
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton(
                text=Texts().return_buttontext,
                callback_data="menu"
            )
        )
        return keyboard


    def DonateKeyboard():
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton(
                text=Texts().avoca_buttontext,
                url="https://www.donationalerts.com/r/avoca"
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                text=Texts().server_buttontext,
                url="https://www.qiwi.com/n/VLAD2030"
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                text=Texts().return_buttontext,
                callback_data="menu"
            )
        )
        return keyboard


    def CWSCAMKeyboard():
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton(
                text=Texts().CWSCAM_buttontext,
                url="https://t.me/+s2wTdUM95eMzMDQy"
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                text=Texts().return_buttontext,
                callback_data="menu"
            )
        )
        return keyboard


    def BuyPrivateKeyboard():
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton(
                text=Texts().buy_buttontext,
                url="https://www.donationalerts.com/r/avoca"
            )
        )
        return keyboard



class Avoca:

    betatest = "0"
    # sys.setrecursionlimit(10000)

    # –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot = Bot(
        token=ApiToken.TOKEN,
        parse_mode=types.ParseMode.HTML
    )
    storage = MemoryStorage()
    dp = Dispatcher(bot, storage=storage)



    async def GetOnline():
        return online



    @dp.chat_join_request_handler()
    async def join_request(update: types.ChatJoinRequest):
        user_id = await update.from_user.id
        await bot.send_message(user_id, Texts().requestad_text)
        # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
        return None



    # /menu
    @dp.message_handler(commands=['menu', 'start'])
    async def Menu(message: types.Message):
        logger.info("/menu from {user_id} id", user_id=message.from_user.id)
        await message.reply(
            text=Texts().menu_text,
            reply_markup=Keyboards.MenuKeyboard()
        )
        return None


    @dp.callback_query_handler(text="get_instruction")
    async def GetInstruction(callback_query: types.CallbackQuery):
        await bot.answer_callback_query(callback_query.id)
        await callback_query.bot.edit_message_text(
            message_id=callback_query.message.message_id,
            chat_id=callback_query.message.chat.id,
            text=Texts().instruction_text,
            reply_markup=Keyboards.ReturnKeyboard(),
        )
        return None


    @dp.callback_query_handler(text="get_scam")
    async def GetScam(callback_query: types.CallbackQuery):
        await bot.answer_callback_query(callback_query.id)
        await callback_query.bot.edit_message_text(
            message_id=callback_query.message.message_id,
            chat_id=callback_query.message.chat.id,
            text=Texts().getscam_text,
            reply_markup=Keyboards.CWSCAMKeyboard(),
        )
        return None


    @dp.callback_query_handler(text="get_online")
    async def GetOnline(callback_query: types.CallbackQuery):
        await bot.answer_callback_query(callback_query.id)
        await bot.answer_callback_query(
            callback_query.id,
            text=Texts().error_text,
            show_alert=False,
            reply_markup=Keyboards.ReturnKeyboard(),
        )
        return None


    @dp.callback_query_handler(text="get_private")
    async def GetPrivate(callback_query: types.CallbackQuery):
        await bot.answer_callback_query(callback_query.id)
        await bot.answer_callback_query(
            callback_query.id,
            text=Texts().private_text,
            reply_markup=Keyboards.BuyPrivateKeyboard(),
        )
        return None


    @dp.callback_query_handler(text="get_beta")
    async def GetBeta(callback_query: types.CallbackQuery):
        await bot.answer_callback_query(callback_query.id)
        if betatest == "1":
            logger.warning("betatest==True")
        elif betatest == "0":
            logger.warning("betatest==False")
            await bot.answer_callback_query(
                callback_query.id, text=Texts().betausererror_text, show_alert=True
            )
            await bot.answer_callback_query(
                callback_query.id,
                text=Texts().betausererror_text,
                show_alert=False,
                reply_markup=Keyboards.ReturnKeyboard(),
            )
        return None


    @dp.callback_query_handler(text="donate")
    async def Donate(callback_query: types.CallbackQuery):
        await bot.answer_callback_query(callback_query.id)
        await callback_query.bot.edit_message_text(
            message_id=callback_query.message.message_id,
            chat_id=callback_query.message.chat.id,
            text=Texts().donate_text,
            reply_markup=Keyboards.DonateKeyboard(),
        )
        return None


    @dp.callback_query_handler(text="return")
    async def Return(callback_query: types.CallbackQuery):
        await bot.answer_callback_query(callback_query.id)
        await callback_query.bot.edit_message_text(
            message_id=callback_query.message.message_id,
            chat_id=callback_query.message.chat.id,
            text=Texts().menu_text,
            reply_markup=Keyboards.MenuKeyboard(),
        )
        return None


    @dp.callback_query_handler(text="rus")
    async def Russian(callback_query: types.CallbackQuery):
        await bot.answer_callback_query(callback_query.id)
        await callback_query.bot.edit_message_text(
            message_id=callback_query.message.message_id,
            chat_id=callback_query.message.chat.id,
            text=Texts().menu_text,
            reply_markup=Keyboards.MenuKeyboard(),
        )
        return None


    @dp.callback_query_handler(text="eng")
    async def English(callback_query: types.CallbackQuery):
        await bot.answer_callback_query(callback_query.id)
        await callback_query.bot.edit_message_text(
            message_id=callback_query.message.message_id,
            chat_id=callback_query.message.chat.id,
            text=Texts().menu_text,
            reply_markup=Keyboards.MenuKeyboard(),
        )
        return None


    # –±–µ—Å–ø–æ–ª–µ–∑–Ω–∞—è —Ö—Ä–µ–Ω—å, –Ω–æ —É–¥–∞–ª—è—Ç—å —Å—Ç—Ä–∞—à–Ω–æ
    @dp.errors_handler(exception=MessageNotModified)
    async def message_not_modified_handler(update, error):
        return True




logger.success("bot started!")
executor.start_polling(Avoca.dp, skip_updates=True)
logger.warning("bot shutdown")